\documentclass[a4paper]{llncs}

%%%% IF NOT LLNCS
%\documentclass[a4paper,11pt]{article}
%\usepackage{amsthm}
%\newtheorem{theorem}{Theorem}
%\newtheorem{corollary}{Corollary}
%\newtheorem{lemma}{Lemma}

%\usepackage[utf8]{inputenc} % danske tegn
\usepackage{hyperref}
\usepackage[noadjust]{cite}
\usepackage{amsmath,amssymb,nicefrac,graphicx}
%\usepackage{lastpage,array}
%\renewcommand{\baselinestretch}{0.98}
\usepackage{algpseudocode,algorithm}
\usepackage{lineno}

%\setlength{\textheight}{20cm}
%\setlength{\textwidth}{12.4cm}
% Upright greek letters that scales properly.
%\usepackage{upgreek}

% Improved typography. Also typically reduces the length of text (in pages).
%\usepackage{microtype}

% Allow table cells spanning multiple rows/columns
%\usepackage{multirow}


%% TO DISABLE
\usepackage{comment}
\usepackage[draft]{fixme}

%% SQUEEZE
\usepackage{microtype}
%\usepackage{times}
\usepackage[font={small}]{caption, subfig}
%\usepackage[margin=1.3in]{geometry}

%Macros: Trees, SLPs
\newcommand{\size}{\ensuremath{\mathit{size}}}
\newcommand{\depth}{\ensuremath{\mathit{depth}}}
\newcommand{\leaf}{\ensuremath{\mathit{leaf}}}
\newcommand{\heavy}{\ensuremath{heavy}}
\newcommand{\heavypath}{\ensuremath{H}}
\newcommand{\rootnode}{\ensuremath{\mathit{root}}}
\newcommand{\lchild}{\ensuremath{\mathit{left}}}
\newcommand{\rchild}{\ensuremath{\mathit{right}}}


%Macros: Points
\newcommand{\points}{\ensuremath{\mathit{points}}}


%Macros: Polylogs
\newcommand{\polylog}{\ensuremath{\mathrm{\, polylog \,}}}

%Operations
\newcommand{\opins}{\ensuremath{\textsc{insert}}}
\newcommand{\opdel}{\ensuremath{\textsc{delete}}}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%% TITLEPAGE %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{Colored Range Counting in Linear Space}
\author{\small
	Roberto Grossi \qquad S{\o}ren Vind$^\star$
}
\date{}
\institute{}

\begin{document}
\linenumbers
\pagestyle{plain}	

\maketitle
% Fix grants, reset footnote counter to arabic.
\renewcommand{\thefootnote}{\fnsymbol{footnote}}
\footnotetext[1]{Supported by a grant from the Danish National Advanced Technology Foundation.} %star

\renewcommand{\thefootnote}{\arabic{footnote}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%% ABSTRACT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{abstract}
    In the \emph{colored range counting problem}, we are given a set of $n$ colored points in $d \geq 2$ dimensions to preprocess. A query asks us to report the number of distinct colors found in an ortogonal query range.
    
    \quad We give the first data structure for the two dimensional problem obtaining linear space usage and $o(n)$ worst case query time. We also give the first data structure for the problem obtaining almost-linear space usage for multidimensional points and $o(n)$ worst case query time. At the same time, even in two dimensions, we present the first dynamic solutions to the problem, allowing point insertions and deletions. 
    
    \quad We also present solutions using almost-linear space that answer queries in almost-linear time in the number of colors, and an efficient solution to the 1D case when the number of colors is small.
    \fxfatal{Fix the abstract to include reporting.}
\end{abstract}

%\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%% INTRODUCTION %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
\emph{Standard range searching} is extremely well-studied (See  \fxfatal{cite} for an overview). Generally, a set of points must be stored to support queries given an orthogonal $d$-dimensional query box $Q$. Two of the classic problems are standard range reporting, asking for the points in $Q$, and standard range counting, which asks for the number of points in $Q$. In 1993, Janardan and Lopez \cite{janardan1993generalized} introduced one of the natural generalisations of standard range searching where each point has a color. This variation is known as \emph{colored range searching}\footnote{Also known in the litterature as categorical or generalized range searching.}. The colored problems are \emph{colored range reporting}, where a query answer must list the distinct colors in $Q$, and \emph{colored range counting}, where the number of distinct colors in $Q$ must be reported. We let $n$ denote the number of points stored, $\sigma \leq n$ denote the number of distinct colors and $k \leq \sigma$ be the number of colors in the output.

For the colored problems, counting is considered harder than reporting, because counting is not decomposable. That is, knowing the number of colors in two halves of $Q$ does not give the answer to a query. This is opposed to reporting where the query answer can be obtained by merging the list of colors in two halves of $Q$ and removing duplicates. For the standard problems, both types of queries are decomposable. 

Observe that for both colored problems, the trivial solution takes linear time and space, storing the points and looking through them all to answer the query. Another solution is to store one data structure for all points of each color that supports standard range emptiness queries (is there a point inside $Q$?). In two dimensions, this approach can answer queries in $O(\sigma \log n)$ time and linear space using a range emptiness data structure by Nekrich \cite{nekrich2009orthogonal}. However, observe that this may be worse than the trivial solution, depending on $\sigma$. We will review the known solutions to the problems in the following.

\paragraph*{Colored Range Reporting}
The colored range reporting problem is relatively well-studied \cite{janardan1993generalized, nekrich2012space, nekrich2013optimal, gagie2012colored, shi2005optimal, gupta1995further, gupta1997technique}, with output-sensitive solutions almost matching the time and space bounds obtained for standard range reporting in one and two dimensions. In particular, Nekrich and Vitter gave a dynamic solution to one dimensional colored range reporting with optimal query time $O(1+k)$ and linear space \cite{nekrich2013optimal}, while Gagie et al. earlier presented a succinct solution with query time logarithmic in the length of the query interval \cite{gagie2012colored}. 

In two dimensions Shi and JaJa obtain a bound of $O(\log n + k)$ time and $O(n \log n)$ space \cite{shi2005optimal}. Gupta et al. achieve a data structure using $O(n \log ^4 n)$ space and answering queries in $O(\log ^2 n + k)$ \cite{gupta1995further} in the three-dimensional case. To the best of our knowledge, the only known data structure for $> 3$ dimensions is by van Kreveld, answering queries in $O(\log n + k)$ time and using $O(n^{1+\epsilon})$ space \cite{van1992new, gupta1997technique}. \fxfatal{Also work on CRR on the grid.}

\paragraph*{Colored Range Counting}
For colored range counting there is a large gap in the known bounds compared to standard range counting, especially in two or more dimensions. For example, a classic range tree solves two-dimensional standard range counting in logarithmic time, but no logarichmic time solutions in $o(n^2)$ space are known for colored range counting.

One-dimensional colored range counting was shown equivalent to two-dimensional standard range counting by Green Larsen and van Walderveen \cite{larsen2013near, gupta1995further}. Thus, the optimal $O(\log n / \log \log n)$ upper bound for two-dimensional standard range counting by JaJa, Mortensen and Shi \cite{jaja2005space} matching a lower bound by Patrascu \cite{patrascu2007lower} is also optimal for one-dimensional colored range counting.

For two dimensions, Gupta et al. \cite{gupta1995further} show a solution using $O(n^2 \log^2 n)$ space that answer queries in $O(\log^2 n)$ time. They obtain their result by storing $n$ copies of a data structure that is capable of answering three-sided queries. The same bound was matched by Kaplan et al. \cite{kaplan2007counting} with a completely different approach \fxfatal{Explain the approach}. Kaplan et al. also present a tradeoff solution with $O(X \log^7 n)$ query time and $O((\frac{n}{X})^2 \log^6 n + n \log^4 n)$ space for $1 \leq X \leq n$. Observe that the minimal space use for the tradeoff solution is $O(n \log^4 n)$.

In $d > 2$ dimensions, the only known solutions are by Kaplan et al. \cite{kaplan2007counting}. One of their solutions answer queries in $O(\log ^{2(d-1)} n)$ time and $O(n^d \log ^{2(d-1)} n)$ space, and they also show a number of tradeoffs, the best one having $O(X \log^{d-1} n)$ query time and using $O((\frac{n}{X})^{2d} + n \log^{d-1} n)$ space for $1 \leq X \leq n$. In this case, the minimal space required by the tradeoff is $O(n \log ^{d-1} n)$.

Finally, Kaplan et al. \cite{kaplan2007counting} showed that answering $n$ two dimensional colored range counting queries in $O(n^{p/2})$ time (including all preprocessing time) yields an $O(n^p)$ time algorithm for multiplying two $n \times n$ matrices. For $p < 2.373$, this would improve the best known upper bound for matrix multiplication\cite{williams2012multiplying}. Thus, solving two dimensional colored range counting in polylogarithmic time per query and linear space would be a major breakthrough. This suggest that even in two dimensions, no logarithmic time solutions may exist for colored range counting.

\subsection*{Our Results}
Observe that there are no previous solutions to any of the problems in two dimensions that uses linear space and answer queries in $o(n)$ worst case time. Furthermore, there are no known solutions in higher dimensions using $o(n^{1+\epsilon})$ space and answering queries in $o(n)$ worst case time. We present the first data structures obtaining these bounds. Our main results can be summarised in the following theorems, noting that $c > 1$ is a positive integer. Since $\sigma \leq n$, the solutions are almost logarithmic improvements over previous solutions in the worst case.

%%% Two dimensions:
\begin{theorem}\label{thm:2D}
    There is a linear space data structure for two-dimensional colored range counting and reporting storing $n$ points, each assigned one of $\sigma$ colors. The data structure answers queries in time $O( ( \sigma / \log n + n / \log ^c n ) \log ^{2+\epsilon} \log ^c n )$, with reporting requiring an additive term $O(k)$.
\end{theorem}

%%% Many dimensions:
\begin{theorem}\label{thm:dD}
    There is a $O(n \log \log ^{(d-1)c} n)$ space data structure storing $n$ $d$-dimensional colored points each assigned one of $\sigma$ colors. The data structure answers colored range counting and reporting queries in time $O(( \sigma / \log n + n / \log ^c n ) \log ^{d-1} \log ^{c} n \log \log \log ^c n )$. Reporting requires a additive $O(k)$ time.
\end{theorem}

To obtain these results, we partition points into groups depending on their color. Each group stores all points of having $\leq \log n$ specific colors. Because the colors are partitioned across the groups, we can obtain the final result to a query by merging query results for each group (and we have thus obtained a decomposition of the problem along the color dimension).

In order to reduce the space usage of our data structure, we partition the points in each group into a number of buckets of $\leq \log^c n$ points each. The number of buckets is $O(\sigma / \log n + n / \log ^c n)$, with the first term counting all underfull buckets and the second counting all full buckets. Each bucket stores $m \leq \log ^c n$ points colored in $f \leq \log n$ different colors.
%Our approach partitions points into groups depending on their color. Each group stores all points of $\leq \log n$ specific colors. A further subdivision of the groups into buckets ensures that the number of points in each bucket is $O(\log ^c n)$. Thus, the number of buckets is $O(\sigma / \log n + n / \log ^c n)$ (the first term counts all underfull buckets, the second counts all full buckets). Because the colors are partitioned across the groups, we can obtain the final result to a query by summing the number of colors found in each group (and we have thus obtained a decomposition of the problem along the color dimension). 
%As the colors of each group may be present in several buckets, we cannot obtain the solution for a group from an individual count for each bucket (since we risk counting a color several times). 
%Instead, we use an efficient solution to the $d$-dimensional \emph{colored range reporting problem} in the buckets (where the number of points is $m \leq \log ^c n$ and the number of colors is $f \leq \log n$). 
To avoid counting a color several times (across different buckets), we use a solution to the $d$-dimensional colored range reporting problem in each bucket and require that the answer to a query is given as a $f$-bit long bitstring. Since $f \leq w$, we can use bitwise OR operations to efficiently compose the answers to each of the queries on the buckets to produce the full answer for the group. We finally use a $o(n)$ space lookup table to obtain the count or the colors present in the bitstring answer. This takes constant time per answer found in the lookup table.

The solution to $d$-dimensional colored range reporting for each bucket is obtained by building a $d$-dimensional range tree for the $m$ points, which uses a linear space and $O(\log \log m)$ time solution to one-dimensional colored range reporting as the last auxiliary data structure. In total, the solution requires $O(m \log ^{d-1} m)$ space and $O(\log ^{d-1} m \log \log m)$ query time. In two dimensions, we can reduce the space to linear by only storing representative rectangles in the range tree covering $\Theta(\log m)$ points each. We use a linear space range reporting data structure by Nekrich \cite{nekrich2009orthogonal} to enumerate and check the underlying points for each of the $O(\log m)$ range tree leafs intersecting the query range, costing us a small penalty per point. We thus obtain a query time of $O(\log ^{2+\epsilon} m)$ for two-dimensional linear space buckets.

\vspace{0.3cm}
Though the basic approach is simple, it allows us to give in Theorem \ref{thm:2D} the first linear space data structure for two-dimensional colored range counting and colored range reporting that has $o(n)$ worst case query time. Furthermore, Theorem \ref{thm:dD} is the first almost-linear space (that is, $o(n^{1+\epsilon})$ space) data structure for colored range counting and colored range reporting in higher dimensions with $o(n)$ worst case query time. It also has the added benefit that it can be trivially parallelized, so it is well-suited for the distributed computing setting.
\fxfatal{Comparison needs to be improved.}

Using classic results on dynamisation of balanced trees and in particular range trees, we can dynamise the data structure with a little additional cost in query time. This is the first dynamic data structure for the two-dimensional problem with $o(n)$ query time.

%%% Dynamic:
\begin{theorem}\label{thm:dyn-dD}
    There is a dynamic $O(n \log \log ^{(d-1)c} n)$ space data structure storing $n$ $d$-dimensional colored points each assigned one of $\sigma$ colors. The data structure answers colored range counting and reporting queries in time $O(( \sigma / \log n + n / \log ^c n ) \log ^{d} \log ^{c} n)$. Reporting requires a additive $O(k)$ time and updates are supported in $O(\log ^d \log ^c n)$ amortised time.
\end{theorem}

Finally, if one is prepared to pay a little extra space, we can get an output-sensitive solution to the problem where the query time is bounded by the number of distinct colors.

\begin{itemize}
    \item Building on this approach, and modifying the solution for each bucket as well as the bucketing algorithm a little, we can obtain the following alternative results.
    \item Alternative (faster, but larger) solution.
    \item Solution with almost-linear time in $\sigma$ or $k$
    \item Dynamic data structures, how? Check Arne Andersson paper on balanced trees...
\end{itemize}

\section{Preliminaries}
We denote the set of $d$-dimensional points by $P$ and let $n = |P|$. The point coordinates are from an unbounded universe. The set of distinct colors is $\Sigma$ and we let $\sigma = |\Sigma|$. Our data structures work in the Word RAM model, where each word has size $w \geq \log n$ bits. \fxfatal{Almost everything works in comparison model, only pred. doesn't}

\section{Colored Range Counting in Almost-Linear Space}
In this section, we present the basic approach used in all theorems. Later sections show how to adapt the approach to obtain different bounds, and in particular, how to obtain linear space usage for two dimensional points. We first show how to partition the points into $O(\sigma / \log n + n / \log ^c n)$ buckets storing $m = O(\log ^c n)$ points and $f = O(\log n)$ distinct colors each, for which the results can be easily combined. We then show how to answer queries in each bucket in time $O(\log ^{d-1} m \log \log m)$ and space $O(m \log ^{d-1} m)$. We thus obtain Theorem \ref{thm:dD}.

\subsection{Color Grouping and Bucketing}
We partition the points of $P$ into a number of groups $P_i$, where $i = 1, \ldots, \frac{\sigma}{\log n}$, depending on their color. Each group stores all points having $f = \log n$ distinct colors (except for the last group which may store points with less distinct colors). For each group $P_i$ we store an ordered color list $L_i$ of the $f$ colors in the group. That is, a group may contain $O(n)$ points but the points has at most $f$ distinct colors. Observe that since colors are partitioned among groups, we can clearly answer a colored query by merging the results to the same query in each group. 
%Observe that assuming a colored range counting query can be answered for each group, we can clearly answer a colored range counting query by adding the results for each group (since colors are partitioned among groups).

Each group is further partitioned into a number of buckets containing $m = \log ^c n$ points each (except for the last bucket, which may contain fewer points). Since the buckets partition the points and there cannot be more than one bucket with fewer than $\log ^c n$ points in each group, the total number of buckets is $O(\sigma / \log n + n / \log ^c n)$. We require that each bucket supports answering \emph{restricted colored range reporting} queries with a $f$-bit long bitstring, where the $j$'th bit indicates if color $L_i[j]$ is present in the query area. Clearly, we can obtain the answer for a complete group by using bitwise OR operations to merge answers for all buckets in a group. We call the resulting bitstring $F_{i, Q}$, and note that it indicates the colors present in the query range across the entire group $P_i$.
%Clearly, a constant number of bitwise OR operations per bucket is enough to produce a $f$-bit long bitstring from a single restricted colored range reporting query per bucket. We call this bitstring $F_{i, Q}$, and note that it indicates the colors present in the query range across the entire group $P_i$.

Finally, we store a table $T$ of size $O(\sqrt{n} \log n) = o(n)$ for all possible bitstrings of length $\frac{f}{2}$. For each bitstring, the table stores the number of 1's present in the bitstring and the indices where the 1's are present. Using two table lookups in $T$ with two halves of $F_{i, Q}$, we can both obtain the number of colors present in the group, as well as the indices into $L_i$ for the colors that are present. 

Summarising, we can merge answers to the restricted colored range reporting queries in constant time per bucket and obtain the full query results for each group. Using a constant number of table lookups per group, we can count the number of colors present in $Q$. And finally, using constant time per color we can furthermore report the colors.
%Summarising, we can combine answers from each bucket in a group and add the results for all groups in time linear in the number of buckets for a colored range counting query. Thus, the total time spent is bounded by the number of buckets present multiplied by the time taken to answer a restricted colored range reporting query in a bucket. Additionally, we can answer colored range reporting queries in the same time plus constant time per color reported.

\subsection{Restricted Colored Range Reporting for Buckets}\label{sec:RCRR}
Each bucket in a group $P_i$ stores $O(m)$ points colored with $f = O(\log n)$ distinct colors. A simple solution is to answer a query using a classic range tree $R$, augmented with a $f$-bit long bitstring for each node on the last level of $R$ (using the $L_i$ ordering of the colors). It is well-known that a $d$-dimensional query can be answered by finding $O(\log ^d m)$ summary nodes on the last level. The colors within the range can thus be reported by taking the bitwise OR of all the bitstrings stored at the summary nodes in total time $O(\frac{f}{w} \log ^d m) = O(\log ^d m)$ and space $O(m \log ^{d-1} m \frac{f}{w}) = O(m \log ^{d-1} m)$. This data structure can be constructed in time $O(m \log ^{d-1} m)$ by constructing the node bitstrings from the leaves and up. 

While the above solution is enough to obtain some of our results, we can improve it by replacing the last level in the $d$-dimensional range tree with a new data structure for one dimensional colored range reporting that answer queries in time $O(\log \log m)$ and linear space. A query may perform $O(\log ^{d-1} m)$ queries on the last level of the range tree, so the query time is reduced to $O(\log ^{d-1} m \log \log m)$ for each bucket. 

Observe that though the points are not from a bounded universe, we can remap a query in a bucket to a bounded universe of size $m$ in time $O(\log m)$ and linear space per dimension. We do so for the final dimension, noting that we only need to do it once for all $O(\log ^{d-1} m)$ queries in the final dimension. 

\subsubsection*{One Dimensional Colored Range Reporting}
Given $O(m)$ points in one dimension from a universe of size $m$, each colored with one of $f$ distinct colors, we now show how to report the colors contained in a query range in $O(\log \log m)$ time and linear space. First, partition the points into $j = O(m / \log m)$ intervals spanning $\Theta(\log m)$ consecutive points each. We call the first point stored in each interval a \emph{representative} and store a predecessor data structure containing all representatives.

Each interval is stored as a balanced binary search tree, with each node storing a $f$-bit long bitstring indicating the colors that are present in its subtree. A query in the interval tree is answered by taking the bitwise OR of the bitstrings stored at the $O(\log \log m)$ nodes spanning a range in the interval.

We store $O(\log m)$ $f$-bit long bitstrings for each of the $O(m / \log m)$ representatives in total linear space. Each of these bitstrings is a summary of the colors stored in the $1, 2, \ldots, 2^{\log j}$ neighboring intervals including the interval containing the representative (we store these bitstrings both towards the left and the right from the representative).

A query $[a, b]$ is answered by finding at most two bitstrings covering the entire range of fully contained intervals, and combining these with at most two bitstrings from the interval trees that contain $a$ and $b$. Finding the two outermost intervals that are fully covered is done using predecessor/successor queries with $a$ and $b$ on the representatives. Since we store summaries for all exponential numbers of intervals and all representatives, there are at most two bitstrings summarising the colors found in the entire range of fully contained intervals. Thus, using one of the classic predecessor data structures\fxfatal{vEB pred}, we obtain a query time of $O(\log \log m)$ and linear space.

\section{Linear Space Two Dimensions Colored Range Counting}
To obtain linear space in two dimensions, we use the same approach as described previously, storing points in groups depending on their color and splitting the groups into smaller buckets. We only change the solution for each bucket of $m$ points and $f \leq \log n$ distinct colors to use linear space instead of $O(m \log m)$ space. Thus, we will just describe the solution for a bucket $B_i$ in the following.

We store a linear space two-dimensional standard range reporting data structure $A_i$ by Nekrich \cite{nekrich2009orthogonal} for all points in the bucket $B_i$:
\begin{theorem}[Nekrich \cite{nekrich2009orthogonal}]
    There is a linear space data structure storing $n$ two-dimensional points which support orthogonal standard range reporting queries in $O(\log n + k \log ^{\epsilon} n)$ time and updates in $O(\log ^{3+\epsilon} n)$ time, where $k$ is the reported number of points and $\epsilon > 0$.
\end{theorem}

We also store the simple range tree augmented with $f$-bit long bitstrings previously described, but instead of storing points in the range tree, we reduce its space usage by only storing areas covering $O(\log m)$ points each. This can easily be done by first building the range tree taking $O(m \log m)$ space, and cutting off subtrees at nodes at maximal height such that $\Theta(\log m)$ points is covered by the node. \fxfatal{Can we do better, build it on the fly?}

A query is answered by the range tree, finding $O(\log ^2 m)$ summary nodes that span the entire query range $Q$. Combining bitstrings as previously described, the colors for all fully contained ranges (that are not stored in the leafs) can thus be found. Since the $O(\log m)$ points spanned by each leaf $\ell$ intersecting the query range may not be contained in the query range, we must check those points individually. To do so, we query $A_i$ with the range spanned by $\ell$ to retrieve the points and in constant time for each point check the color and the location (and build a bitstring for the colors spanned by $\ell$ and contained in $Q$). We then merge the bitstrings for all summary nodes in constant time per bitstring to obtain the final result.

The time spent answering a query is $O(\log ^2 m)$ to find all bitstrings in non-leaf nodes of the range tree and to combine all bitstrings. The time spent finding the bitstring in leafs is $O(\log ^{1+\epsilon} m)$ per leaf. Observe that only two leafs spanning a range of $O(\log m)$ points may be visited in each of the $O(\log m)$ second level data structures visited, so the time spent in all leafs is $O(\log ^{2+\epsilon} m)$, which is also the total time. Finally, since we reduced the size of the range tree by a factor $\Theta(\log m)$, the total space usage is linear. This concludes the proof of Theorem \ref{thm:2D}.

\begin{itemize}
    \item Same approach can be used for higher dimensions (Karpinski, Nekrich 2009)
    \item In particular, in three dimensions, we can obtain a solution with X space use and Y query time.
\end{itemize}

\section{Dynamic Data Structures}
We will now show how to support operations $\opins(p, c)$ and $\opdel(p)$ for a point $p$ and color $c$, inserting and deleting a point, respectively. Note that the color $c$ may be new (i.e. not used before). We will still use parameters $f$ and $m$ to denote the number of colors in groups and points in buckets, respectively. 

We first give bounds on how to update a bucket, and then show how to support updates in the color grouping and point bucketing. We will give bounds when the buckets are implemented with a simple range trees and each node on the final level is augmented with an $f$-bit long bitstring over the colors in the subtree. 

\subsection{Updating a Bucket}
Updating a bucket with a point corresponds to updating a $d$-dimensional range tree. Using partial rebuilding, this can be done in amortised time $O(\log^d m)$, including updating the bitstrings in the partially rebuilt trees. Finally, the bitstrings for the $O(\log^{d-1} m)$ rebuilt trees on the last level may need to be updated on the path to the root on that level. This can be done in time $O(\log m)$ per tree, giving a total insertion time of $O(\log^d m)$ amortized. \fxfatal{Andersson dynamic, Overmars83}

\subsection{Updating Color Grouping and Point Bucketing}
To support an $\opins(p, c)$ operation, we first need to find the group $P_i$ to which $c$ belongs. If the color is new and there is a group with $< f$ colors, we must update the color list $L_i$. Otherwise, we can create a new group for the new color (and $O(f)$ next new colors). In the group, we must find a bucket to put $p$ in. If possible, we put $p$ in a bucket with $< m$ points, or otherwise we create a new bucket for $p$. Keeping track of sizes groups and buckets can be done using a priority queue.

Supporting $\opdel(p)$, we risk making both groups and buckets underfull, requiring a merge of either. A group is underfull if there is $< f/2$ colors in it, and if there are two such groups, we merge them. Merging two groups $P_i, P_j$ into the new group $P_k$ involve merging the color lists $L_i, L_j$ into $L_k$ for the colors present. This does not require us to merge the buckets (as points are partitioned arbitrarily into the buckets). However, an answer to a query in a bucket is not correct for $P_k$, since the merged group has a changed color list. We can fix query answers in constant time per answer using a constant number of queries to a $O(n)$ space lookup table for all possible mappings. Buckets are underfull when they contain $< m/2$ points. If there are more than one such bucket, we merge the two buckets in time $O(m \log^d m)$. Since merging can only happen after $O(m)$ deletions, the amortized time for a deletion is $O(\log^d m)$. 
\fxfatal{What if there is a previous existing mapping?}

\section{Color-Bounded Queries}
\begin{itemize}
    \item It is possible to obtain a solution in which the query time is bounded by the number of colors instead of having a term depending on $n$. 
    \item We can do so by not splitting the groups, and using a single data structure as described in Section \ref{sec:RCRR} for the buckets. In two dimensions, this results in a data structure with query time $O(\sigma \log \log n)$ and space usage $O(n \log n)$.
    \item This solution can be modified slightly to be output-sensitive by storing an uncolored range emptiness data structure for all points in each group by Nekrich, to filter out buckets where no results would be returned (and only perform the expensive query in the groups with a color present). This allows us to get a query time of $O(\sigma + k \log n \log \log n)$ and $O(n \log n)$ space since the $k$ output colors could be in different buckets.
    \item In $d > 2$ dimensions, the same approach (without using the range emptiness data structure) has $O(\sigma \log^{d-2} n \log \log n)$ query time and $O(n \log ^{d-1} n)$ space use.
\end{itemize}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%% REFERENCES %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\small
\bibliographystyle{abbrv}

%\nocite{*}
\bibliography{references}

\end{document}
